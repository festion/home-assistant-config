# --- Frontend (Themes & Lovelace) ---
# Include custom themes and Lovelace resources.
frontend:
  # Loads custom themes from the 'themes' directory.
  # !include_dir_merge_named merges all files in the directory into a single dictionary.
  themes: !include_dir_merge_named themes

# --- Lovelace Configuration ---
lovelace:
  mode: yaml  # Enables YAML mode for Lovelace configuration.
  resources:
    # - url: /local/community/  # This line is commented out and likely incomplete.
    #   type: module             # It's recommended to use HACS for managing custom resources.
    # Registers the WebRTC Camera custom card resource.
    - url: /webrtc/webrtc-camera.js
      type: module
    - url: /hacsfiles/mushroom-strategy/mushroom-strategy.js
      type: module
      
prometheus:
  namespace: homeassistant
  
# --- Default Integrations ---
default_config:

# --- Configuration Splits ---
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
group: !include groups.yaml


# --- HTTP Configuration ---
http:
  use_x_forwarded_for: true
  trusted_proxies:
    - 192.168.1.0/24

# --- Custom Panel ---
panel_custom:
  - name: ha_system
    sidebar_title: System Info
    sidebar_icon: mdi:information-variant
    js_url: /api/hassio/app/entrypoint.js
    url_path: "hassio/system/info"
    embed_iframe: true
    require_admin: true
    config:
      ingress: core_configurator

# --- Envisalink Integration ---
envisalink:
  host: 192.168.1.108
  panel_type: DSC
  user_name: user
  password: user
  code: "1059"
  port: 4025
  evl_version: 4
  keepalive_interval: 60
  zonedump_interval: 30
  timeout: 10
  panic_type: Police

  zones:
    1:
      name: "Front Garage"
      type: "opening"
    2:
      name: "Back Door"
      type: "opening"
    3:
      name: "Master Windows"
      type: "opening"
    4:
      name: "Downstairs Windows"
      type: "opening"
    5:
      name: "Upstairs Windows"
      type: "opening"

  partitions:
    1:
      name: "Home Alarm"


logger:
  default: info
  logs:
    custom_components.ab_gateway: debug

recorder:
  purge_keep_days: 30
  include:
    entities:
      - sensor.wroommicrousb_average_volume_since_last_fertigation
      - sensor.wroommicrousb_reservoir_current_volume
      - sensor.wroommicrousb_reservoir_water_temp     

sensor:
  - platform: template
    sensors:
      current_interval_average:
        unique_id: current_interval_average_depth
        friendly_name: Current Interval Average Depth
        value_template: >-
          {% set last_fertigation_str = states('input_datetime.last_fertigation_time') %}
          {% set readings_str = states('sensor.reserviorsensor_reservoir_depth') %}
          
          {% if last_fertigation_str and readings_str is string and readings_str != 'unknown' %}
            {% set last_fertigation = as_datetime(last_fertigation_str) %}
            {% set readings_with_timestamps = [] %}
            
            {% for item in readings_str.split(',') %}
              {% set reading = item | float(default=none) %}
              {% set timestamp_str = states('sensor.reserviorsensor_reservoir_depth').attributes.get('timestamps')[loop.index0] %}
              
              {% if reading is not none and timestamp_str %}
                {% set timestamp = as_datetime(timestamp_str) %}
                {% if timestamp > last_fertigation %}
                  {% set readings_with_timestamps = readings_with_timestamps + [reading] %}
                {% endif %}
              {% endif %}
            {% endfor %}
            
            {% if readings_with_timestamps | length > 0 %}
              {{ readings_with_timestamps | average }}
            {% else %}
              {{ 'unavailable' }}
            {% endif %}
          {% else %}
            {{ 'unavailable' }}
          {% endif %}
          


# --- MQTT Configuration ---
mqtt:
  sensor:
    - name: "BLE Gateway Raw Data"
      state_topic: "BTLE"
      value_template: "OK"
      json_attributes_topic: "BTLE"
      json_attributes_template: "{{ value_json | tojson }}"
      unique_id: ble_gateway_raw_data

# --- Template Sensors ---
template:
  - sensor:
#     - name: "BLE Debug Sensor"
#       unique_id: ble_debug_sensor
#       state: >
#         {{ state_attr('sensor.ble_gateway_raw_data', 'devices') | tojson }} 
      
      - name: "Rav4 BTLE RSSI (from JSON)"
        unique_id: rav4_btle_rssi_from_json
        unit_of_measurement: "dBm"
        state: >
          {% set mac_to_find = "D0E29D3E51BA" %}
          {% set gateway_data = state_attr('sensor.ble_gateway_raw_data', 'devices') %}
          {% if gateway_data is not none %}
            {% for device in gateway_data %}
              {% if device[1] == mac_to_find %}
                {{ device[2] }}
              {% endif %}
            {% endfor %}
          {% else %}
            unavailable
          {% endif %}
        device_class: signal_strength

      - name: "Rav4 BTLE Advertising Data"
        unique_id: rav4_btle_advertising_data
        state: >
          {% set mac_to_find = "D0E29D3E51BA" %}
          {% set gateway_data = state_attr('sensor.ble_gateway_raw_data', 'devices') %}
          {% if gateway_data is not none %}
            {% for device in gateway_data %}
              {% if device[1] == mac_to_find %}
                "{{ device[3] }}"
              {% endif %}
            {% endfor %}
          {% else %}
            unavailable
          {% endif %}

      - name: "Gavin's Camry RSSI (from JSON)"
        unique_id: gaviun_camry_rssi_from_json
        unit_of_measurement: "dBm"
        state: >
          {% set mac_to_find = "D712ED6A66C6" %}
          {% set gateway_data = state_attr('sensor.ble_gateway_raw_data', 'devices') %}
          {% if gateway_data is not none %}
            {% for device in gateway_data %}
              {% if device[1] == mac_to_find %}
                {{ device[2] }}
              {% endif %}
            {% endfor %}
          {% else %}
            unavailable
          {% endif %}
        device_class: signal_strength

      - name: "Gavin's Camry Advertising Data"
        unique_id: gavin_camry_advertising_data
        state: >
          {% set mac_to_find = "D712ED6A66C6" %}
          {% set gateway_data = state_attr('sensor.ble_gateway_raw_data', 'devices') %}
          {% if gateway_data is not none %}
            {% for device in gateway_data %}
              {% if device[1] == mac_to_find %}
                "{{ device[3] }}"
              {% endif %}
            {% endfor %}
          {% else %}
            unavailable
          {% endif %}

  - binary_sensor:
      - name: "Rav4 in Driveway (from JSON)"
        unique_id: rav4_in_driveway_from_json
        device_class: presence
        state: >
          {% set mac_to_find = "D0E29D3E51BA" %}
          {% set rssi_threshold = -80 %}
          {% set gateway_data = state_attr('sensor.ble_gateway_raw_data', 'devices') %}
          {% if gateway_data is not none %}
            {% for device in gateway_data %}
              {% if device[1] == mac_to_find %}
                {% if device[2] | int(-100) > rssi_threshold %}
                  on
                {% else %}
                  off
                {% endif %}
              {% endif %}
            {% endfor %}
          {% else %}
            unavailable
          {% endif %}
        delay_off:
          minutes: 2

      - name: "Gavin's Camry in Driveway (from JSON)"
        unique_id: gavin_camry_in_driveway_from_json
        device_class: presence
        state: >
          {% set mac_to_find = "D712ED6A66C6" %}
          {% set rssi_threshold = -80 %}
          {% set gateway_data = state_attr('sensor.ble_gateway_raw_data', 'devices') %}
          {% if gateway_data is not none %}
            {% for device in gateway_data %}
              {% if device[1] == mac_to_find %}
                {% if device[2] | int(-100) > rssi_threshold %}
                  on
                {% else %}
                  off
                {% endif %}
              {% endif %}
            {% endfor %}
          {% else %}
            unavailable
          {% endif %}
        delay_off:
          minutes: 2          