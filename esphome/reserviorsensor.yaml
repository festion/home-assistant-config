esphome:
  name: reserviorsensor
  friendly_name: reserviorsensor

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source:
      type: git
      url: https://github.com/ssieb/esphome
      ref: onewire
    components: [gpio]
    refresh: 1min
    
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.122
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  ap:
    ssid: "reserviorsensor"
    password: !secret ap_password

one_wire:
  platform: gpio
  pin: GPIO13  # Correct indentation

# Time component
time:
  - platform: sntp
    id: reservoir_clock

# Water Level Sensor
sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: ultrasonic
    trigger_pin: GPIO17
    echo_pin: GPIO16
    timeout: 2m
    pulse_time: 20us
    update_interval: 60s
    name: "Reservoir Depth"
    id: reservoir_depth  # Consistent ID
    unit_of_measurement: "gal"
    accuracy_decimals: 4
    filters:
      - filter_out: nan
      - lambda: |
          #include <cmath> // Include for M_PI

          const float bucket_height = 40.85;
          const float bucket_diameter = 29.21;

          float distance_cm = x * 100;
          float water_level_cm = bucket_height - distance_cm;

          if (water_level_cm < 0) {
            water_level_cm = 0;
          } else if (water_level_cm > bucket_height) {
            water_level_cm = bucket_height;
          }

          float bucket_radius = bucket_diameter / 2.0;
          float water_volume_cm3 = M_PI * bucket_radius * bucket_radius * water_level_cm;
          float water_volume_gal = water_volume_cm3 * 0.000264172;

          return water_volume_gal;

  - platform: dallas_temp
    id: reservoir_water_temp  # Consistent ID
    name: "Reservoir Water Temp"
    filters:
      - filter_out: nan
      - lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "Â°F"
    accuracy_decimals: 2